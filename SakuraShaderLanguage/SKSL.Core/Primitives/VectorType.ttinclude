<#@include file="..\Intrinsics\Hlsl.MulOverloads.ttinclude" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs"#>
<#
IEnumerable<string> EnumeratePropertyNames(string characters)
{
    static IEnumerable<string> EnumeratePropertyNames(
        string characters,
        StringBuilder builder,
        int remainingCount)
    {
        foreach (char c in characters)
        {
            builder.Append(c);

            if (remainingCount == 1)
            {
                yield return builder.ToString();
            }
            else
            {
                foreach (string name in EnumeratePropertyNames(characters, builder, remainingCount - 1))
                {
                    yield return name;
                }
            }

            builder.Remove(builder.Length - 1, 1);
        }
    }

    StringBuilder builder = new StringBuilder(4);

    for (int length = 1; length <= 4; length++)
    {
        foreach (string name in EnumeratePropertyNames(characters, builder, length))
        {
            yield return name;
        }
    }
}

// Generates all vector access properties for a specified type
void GenerateVectorProperties(string typeName, int elementSize)
{
    string elementTypeName = Regex.Match(typeName, @"^[A-Za-z]+").Value;
    string hlslElementTypeName = elementTypeName.ToLower();
    bool isBoolType = hlslElementTypeName == "bool";
    string fieldElementTypeName = isBoolType ? "int" : hlslElementTypeName;
    int i = int.Parse(Regex.Match(typeName, @"\d+$").Value);
    string formattable = elementTypeName == "Bool" ? "" : "ISpanFormattable";

    List<string> namespaces = new List<string>
    {
        "System.Diagnostics.CodeAnalysis",
        "System.Runtime.CompilerServices",
        "System.Runtime.InteropServices"
    };

    if (elementTypeName != "Bool")
    {
        namespaces.Add("System");
        namespaces.Add("System.Globalization");
    }

    foreach (string name in namespaces.OrderBy(name => name))
    {
        WriteLine($"using {name};");
    }

    if (elementTypeName == "Float" || elementTypeName == "Int")
    {
        WriteLine("using SKSL.Core.Intrinsics.Attributes;");
    }
#>
#if !NET6_0_OR_GREATER
using RuntimeHelpers = SKSL.Core.NetStandard.System.Runtime.CompilerServices.RuntimeHelpers;
#endif

#nullable enable
#pragma warning disable CS0660, CS0661

namespace SKSL;

/// <inheritdoc cref="<#=typeName#>"/>
[StructLayout(LayoutKind.Explicit, Size = <#=(elementSize * i)#>, Pack = <#=elementSize#>)]
public unsafe partial struct <#=typeName#>
<#
    if (formattable != "")
    {
#>
#if NET6_0_OR_GREATER
    : <#=formattable#>
#endif
<#
    }
#>
{
    /// <summary>
    /// A private buffer to which the undefined properties will point to.
    /// </summary>
    private static readonly void* UndefinedData = (void*)RuntimeHelpers.AllocateTypeAssociatedMemory(typeof(<#=typeName#>), sizeof(<#=elementTypeName#>4));
<#
    WriteLine("");
    PushIndent("    ");

    // Generate the private fields
    foreach (char name in "xyzw".Substring(0, i))
    {
        WriteLine($"[FieldOffset({"xyzw".IndexOf(name) * elementSize})]");
        WriteLine($"private {fieldElementTypeName} {name};");
        WriteLine("");
    }

    PopIndent();
#>
    /// <summary>
    /// Gets a reference to a specific component in the current <see cref="<#=typeName#>"/> instance.
    /// </summary>
    /// <param name="i">The index of the component to access.</param>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    [UnscopedRef]
    public ref <#=hlslElementTypeName#> this[int i] => ref *(<#=hlslElementTypeName#>*)UndefinedData;

<#
    // Generate the true/false and zero/one properties
    if (elementTypeName == "Bool")
    {
#>
    /// <summary>
    /// Gets a <see cref="<#=typeName#>"/> value with all components set to <see langword="false"/>.
    /// </summary>
    public static <#=typeName#> False => false;

    /// <summary>
    /// Gets a <see cref="<#=typeName#>"/> value with all components set to <see langword="true"/>.
    /// </summary>
    public static <#=typeName#> True => true;
<#
    }
    else
    {
#>
    /// <summary>
    /// Gets a <see cref="<#=typeName#>"/> value with all components set to 0.
    /// </summary>
    public static <#=typeName#> Zero => 0;

    /// <summary>
    /// Gets a <see cref="<#=typeName#>"/> value with all components set to 1.
    /// </summary>
    public static <#=typeName#> One => 1;
<#
    }

    string unitName, unitOne, unitZero, unitOneXmlName, unitZeroXmlName;

    if (elementTypeName == "Bool")
    {
        unitName = "True";
        unitOne = "true";
        unitZero = "false";
        unitOneXmlName = "<see langword=\"true\"/>";
        unitZeroXmlName = "<see langword=\"false\"/>";
    }
    else
    {
        unitName = "Unit";
        unitOne = "1";
        unitZero = "0";
        unitOneXmlName = "1";
        unitZeroXmlName = "0";
    }

    // Generate the True<N> and Unit<N> properties
    for (int j = 0; j < i; j++)
    {
        string unitComponentName = ("XYZW"[j]).ToString();
        string[] unitArguments = Enumerable.Range(0, i).Select(x => x == j ? unitOne : unitZero).ToArray();
        string unitArgumentExpression = string.Join(", ", unitArguments);
#>

    /// <summary>
    /// Gets a <see cref="<#=typeName#>"/> value with the <see cref="<#=unitComponentName#>"/> component set to <#=unitOneXmlName#>, and the others to <#=unitZeroXmlName#>.
    /// </summary>
    public static <#=typeName#> <#=unitName#><#=unitComponentName#> => new(<#=unitArgumentExpression#>);
<#
    }

    PushIndent("    ");

    // Generate the combinatorial swizzling properties
    foreach (
        var propertyName in
        from source in new[] { "XYZW", "RGBA" }
        let range = source.Substring(0, i)
        from name in EnumeratePropertyNames(range)
        select name)
    {
        WriteLine("");

        string propertyType = propertyName.Length == 1 ? hlslElementTypeName : $"{elementTypeName}{propertyName.Length}";
        bool isReadonly = propertyName.Distinct().Count() < propertyName.Length;
        string refType = isReadonly ? "readonly ref readonly" : "ref";

        // XML docs
        WriteLine("/// <summary>");
        if (propertyName.Length == 1)
        {
            WriteLine($"/// Gets a reference to the <see cref=\"{propertyType}\"/> value representing the <c>{propertyName}</c> component.");
            WriteLine("/// </summary>");

            char fieldName = "xyzw"["xyzwrgba".IndexOf(propertyName.ToLower()) % 4];

            // Property
            WriteLine("[UnscopedRef]");

            if (isBoolType)
            {
                // For bool types, also reinterpret cast from int to bool (the backing field is int to ensure all 4 bytes are initialized)
                WriteLine($"public {refType} {propertyType} {propertyName} => ref Unsafe.As<int, bool>(ref this.{fieldName});");
            }
            else
            {
                WriteLine($"public {refType} {propertyType} {propertyName} => ref this.{fieldName};");
            }
        }
        else
        {
            Write("/// Gets a ");
            if (isReadonly) Write("readonly ");
            Write($"reference to the <see cref=\"{propertyType}\"/> value with the components ");
            Write(string.Join(", ", propertyName.Select(c => $"<see cref=\"{c}\"/>")));
            WriteLine(".");
            WriteLine("/// </summary>");
            WriteLine("/// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>");

            // Property
            WriteLine("[UnscopedRef]");
            Write($"public {refType} {propertyType} {propertyName} ");
            WriteLine($"=> ref *({propertyType}*)UndefinedData;");
        }
    }

    PopIndent();
    WriteLine("");

#>
#if !SOURCE_GENERATOR

<#
    if (elementTypeName == "Bool")
    {
#>
    /// <inheritdoc/>
    public override readonly string ToString()
    {
#if NET6_0_OR_GREATER
        return string.Create(null, stackalloc char[32], $"<<#=string.Join(", ", "xyzw".Take(i).Select(c => $"{{this.{c} != 0}}"))#>>");
#else
        return $"<<#=string.Join(", ", "xyzw".Take(i).Select(c => $"{{this.{c} != 0}}"))#>>";
#endif
    }
<#
    }
    else
    {
#>
    /// <inheritdoc/>
    public override readonly string ToString()
    {
        string separator = NumberFormatInfo.CurrentInfo.NumberGroupSeparator;

#if NET6_0_OR_GREATER
        return string.Create(null, stackalloc char[64], $"<<#=string.Join("{separator} ", "xyzw".Take(i).Select(c => $"{{this.{c}}}"))#>>");
#else
        return $"<<#=string.Join("{separator} ", "xyzw".Take(i).Select(c => $"{{this.{c}}}"))#>>";
#endif
    }

    /// <inheritdoc/>
    public readonly string ToString(string? format, IFormatProvider? formatProvider)
    {
        string separator = NumberFormatInfo.GetInstance(formatProvider).NumberGroupSeparator;

        return FormatInterpolatedStringHandler.Create(
            format,
            formatProvider,
            stackalloc char[64],
            $"<<#=string.Join("{separator} ", "xyzw".Take(i).Select(c => $"{{this.{c}}}"))#>>");
    }

    /// <inheritdoc/>
    public readonly bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        string separator = NumberFormatInfo.GetInstance(provider).NumberGroupSeparator;

        return TryWriteFormatInterpolatedStringHandler.TryWrite(
            destination,
            format,
            provider,
            $"<<#=string.Join("{separator} ", "xyzw".Take(i).Select(c => $"{{this.{c}}}"))#>>",
            out charsWritten);
    }
<#
    }

#>

#endif
<#
    // Generate the negation operator
    if (elementTypeName != "UInt")
    {
        WriteLine("");

        string argumentName = "xyzw".Substring(0, i);
        string operatorName = elementTypeName == "Bool" ? "!" : "-";
#>
    /// <summary>
    /// Negates a <see cref="<#=typeName#>"/> value.
    /// </summary>
    /// <param name="<#=argumentName#>">The <see cref="<#=typeName#>"/> value to negate.</param>
    /// <returns>The negated value of <paramref name="<#=argumentName#>"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator <#=operatorName#>(<#=typeName#> <#=argumentName#>) => default;
<#
    }

    // Generate the numerical operators
    if (elementTypeName != "Bool")
    {
        WriteLine("");
#>
    /// <summary>
    /// Sums two <see cref="<#=typeName#>"/> values.
    /// </summary>
    /// <param name="left">The first <see cref="<#=typeName#>"/> value to sum.</param>
    /// <param name="right">The second <see cref="<#=typeName#>"/> value to sum.</param>
    /// <returns>The result of adding <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator +(<#=typeName#> left, <#=typeName#> right) => default;

    /// <summary>
    /// Divides two <see cref="<#=typeName#>"/> values.
    /// </summary>
    /// <param name="left">The first <see cref="<#=typeName#>"/> value to divide.</param>
    /// <param name="right">The second <see cref="<#=typeName#>"/> value to divide.</param>
    /// <returns>The result of dividing <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator /(<#=typeName#> left, <#=typeName#> right) => default;

    /// <summary>
    /// Calculates the remainder of the division between two <see cref="<#=typeName#>"/> values.
    /// </summary>
    /// <param name="left">The first <see cref="<#=typeName#>"/> value to divide.</param>
    /// <param name="right">The second <see cref="<#=typeName#>"/> value to divide.</param>
    /// <returns>The remainder of dividing <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator %(<#=typeName#> left, <#=typeName#> right) => default;

    /// <summary>
    /// Multiplies two <see cref="<#=typeName#>"/> values.
    /// </summary>
    /// <param name="left">The first <see cref="<#=typeName#>"/> value to multiply.</param>
    /// <param name="right">The second <see cref="<#=typeName#>"/> value to multiply.</param>
    /// <returns>The result of multiplying <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator *(<#=typeName#> left, <#=typeName#> right) => default;
<#
    if (elementTypeName == "Float" || elementTypeName == "Int")
    {
        // Note: for Float and Int vector types, we need to also add explicit operators doing scalar promotion,
        // otherwise there would be an overload issue trying to resolve the right overload when just multiplying
        // by a scalar (which is not using the mul() intrinsic, but just doing elementwise product with promotion).
        WriteLine("");
#>
    /// <summary>
    /// Multiplies a pair of <see cref="<#=typeName#>"/> and <see cref="<#=hlslElementTypeName#>"/> values.
    /// </summary>
    /// <param name="left">The <see cref="<#=typeName#>"/> value to multiply.</param>
    /// <param name="right">The <see cref="<#=hlslElementTypeName#>"/> value to multiply.</param>
    /// <returns>The result of multiplying <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator *(<#=typeName#> left, <#=hlslElementTypeName#> right) => default;

    /// <summary>
    /// Multiplies a pair of <see cref="<#=hlslElementTypeName#>"/> and <see cref="<#=typeName#>"/> values.
    /// </summary>
    /// <param name="left">The <see cref="<#=hlslElementTypeName#>"/> value to multiply.</param>
    /// <param name="right">The <see cref="<#=typeName#>"/> value to multiply.</param>
    /// <returns>The result of multiplying <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator *(<#=hlslElementTypeName#> left, <#=typeName#> right) => default;
<#
        // Process all operators for the mul() intrinsic. We apply the following filtering:
        //   1) Operators where both arguments are of the containing type are skipped. This is because
        //      this operation is already defined as an elementwise product for all vector/matrix types.
        //      Defining the operator would cause a conflict, plus it would alter the semantics anyway.
        //   2) Operators where either parameter is a primitive type (ie. not a vector) are skipped. This
        //      is because such operation is already implicitly defined (it's an elementwise product where
        //      the scalar is auto-promoted to the same vector/matrix type of the other argument). Again,
        //      defining the operator would cause the semantics of such expressions to change to a cross
        //      product, so these operators are intentionally skipped to keep code consistent with HLSL.
        //   3) Among all available overloads, only either of these two cases are selected:
        //        - The containing type matches the return type and the first parameter type of the operator.
        //          This ensures that all overloads where the return type matches the containing type and the
        //          first parameter are generated inside the containing type, as one would do manually as well.
        //        - The return type is unlike both parameter types, but the containing type matches the type of
        //          the first parameter. This is the case when the operator (ie. the cross product) produces a
        //          result that's of a completely different type. In this case, the overload maps to a generated
        //          operator declared in the type that matches the type of the first parameter, as a convention.
        foreach (var mulOverload in MulOverloads.Where(overload =>
            !(overload.Params[0] == typeName && overload.Params[1] == typeName) &&
            Regex.IsMatch(overload.Params[0], @"\d") &&
            Regex.IsMatch(overload.Params[1], @"\d") &&
            (overload.Return == typeName && overload.Params.Contains(typeName) ||
             !overload.Params.Contains(overload.Return) && overload.Params[0] == typeName)))
        {
            WriteLine("");
#>
    /// <summary>
    /// Multiplies two values using matrix math.
    /// </summary>
    /// <param name="x">The first <#=mulOverload.Params[0]#> input value.</param>
    /// <param name="y">The second <#=mulOverload.Params[1]#> input value.</param>
    /// <returns>The result of <paramref name="x"/> times <paramref name="y"/>. The result has the dimension <paramref name="x"/>-rows by <paramref name="y"/>-columns.</returns>
    /// <remarks>
    /// <para>This operator is equivalent to using <see cref="Hlsl.Mul(<#=mulOverload.Params[0]#>, <#=mulOverload.Params[1]#>)"/> with the same input arguments.</para>
    /// <para>For more info, see <see href="https://docs.microsoft.com/windows/win32/direct3dhlsl/dx-graphics-hlsl-mul"/>.</para>
    /// <para>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</para>
    /// </remarks>
    [HlslIntrinsicName("mul", RequiresParametersMatching = true)]
    public static <#=mulOverload.Return#> operator *(<#=mulOverload.Params[0]#> x, <#=mulOverload.Params[1]#> y) => default;
<#
        }
    }

    WriteLine("");
#>
    /// <summary>
    /// Subtracts two <see cref="<#=typeName#>"/> values.
    /// </summary>
    /// <param name="left">The first <see cref="<#=typeName#>"/> value to subtract.</param>
    /// <param name="right">The second <see cref="<#=typeName#>"/> value to subtract.</param>
    /// <returns>The result of subtracting <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator -(<#=typeName#> left, <#=typeName#> right) => default;

    /// <summary>
    /// Compares two <see cref="<#=typeName#>"/> values to see if the first is greater than the second.
    /// </summary>
    /// <param name="left">The first <see cref="<#=typeName#>"/> value to compare.</param>
    /// <param name="right">The second <see cref="<#=typeName#>"/> value to compare.</param>
    /// <returns>The result of comparing <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static Bool<#=i#> operator >(<#=typeName#> left, <#=typeName#> right) => default;

    /// <summary>
    /// Compares two <see cref="<#=typeName#>"/> values to see if the first is greater than or equal to the second.
    /// </summary>
    /// <param name="left">The first <see cref="<#=typeName#>"/> value to compare.</param>
    /// <param name="right">The second <see cref="<#=typeName#>"/> value to compare.</param>
    /// <returns>The result of comparing <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static Bool<#=i#> operator >=(<#=typeName#> left, <#=typeName#> right) => default;

    /// <summary>
    /// Compares two <see cref="<#=typeName#>"/> values to see if the first is lower than the second.
    /// </summary>
    /// <param name="left">The first <see cref="<#=typeName#>"/> value to compare.</param>
    /// <param name="right">The second <see cref="<#=typeName#>"/> value to compare.</param>
    /// <returns>The result of comparing <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static Bool<#=i#> operator <(<#=typeName#> left, <#=typeName#> right) => default;

    /// <summary>
    /// Compares two <see cref="<#=typeName#>"/> values to see if the first is lower than or equal to the second.
    /// </summary>
    /// <param name="left">The first <see cref="<#=typeName#>"/> value to compare.</param>
    /// <param name="right">The second <see cref="<#=typeName#>"/> value to compare.</param>
    /// <returns>The result of comparing <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static Bool<#=i#> operator <=(<#=typeName#> left, <#=typeName#> right) => default;
<#
    }

    // Generate the bitwise operators
    if (elementTypeName == "Int" || elementTypeName == "UInt")
    {
        string argumentName = "xyzw".Substring(0, i);

        WriteLine("");
#>
    /// <summary>
    /// Bitwise negates a <see cref="<#=typeName#>"/> value.
    /// </summary>
    /// <param name="<#=argumentName#>">The <see cref="<#=typeName#>"/> value to bitwise negate.</param>
    /// <returns>The bitwise negated value of <paramref name="<#=argumentName#>"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator ~(<#=typeName#> <#=argumentName#>) => default;

    /// <summary>
    /// Shifts right a <see cref="<#=typeName#>"/> value.
    /// </summary>
    /// <param name="<#=argumentName#>">The <see cref="<#=typeName#>"/> value to shift right.</param>
    /// <param name="amount">The amount to shift each element right by.</param>
    /// <returns>The result of shifting <paramref name="<#=argumentName#>"/> right by <paramref name="amount"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator >>(<#=typeName#> <#=argumentName#>, Int<#=i#> amount) => default;

    /// <summary>
    /// Shifts right a <see cref="<#=typeName#>"/> value.
    /// </summary>
    /// <param name="<#=argumentName#>">The <see cref="<#=typeName#>"/> value to shift right.</param>
    /// <param name="amount">The amount to shift each element right by.</param>
    /// <returns>The result of shifting <paramref name="<#=argumentName#>"/> right by <paramref name="amount"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator >>(<#=typeName#> <#=argumentName#>, UInt<#=i#> amount) => default;

    /// <summary>
    /// Shifts left a <see cref="<#=typeName#>"/> value.
    /// </summary>
    /// <param name="<#=argumentName#>">The <see cref="<#=typeName#>"/> value to shift left.</param>
    /// <param name="amount">The amount to shift each element left by.</param>
    /// <returns>The result of shifting <paramref name="<#=argumentName#>"/> left by <paramref name="amount"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator <<(<#=typeName#> <#=argumentName#>, Int<#=i#> amount) => default;

    /// <summary>
    /// Shifts left a <see cref="<#=typeName#>"/> value.
    /// </summary>
    /// <param name="<#=argumentName#>">The <see cref="<#=typeName#>"/> value to shift left.</param>
    /// <param name="amount">The amount to shift each element left by.</param>
    /// <returns>The result of shifting <paramref name="<#=argumentName#>"/> left by <paramref name="amount"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator <<(<#=typeName#> <#=argumentName#>, UInt<#=i#> amount) => default;

    /// <summary>
    /// Bitwise ands a <see cref="<#=typeName#>"/> value.
    /// </summary>
    /// <param name="left">The <see cref="<#=typeName#>"/> value to bitwise and.</param>
    /// <param name="right">The <see cref="Int<#=i#>"/> value to combine.</param>
    /// <returns>The result of performing the bitwise and between <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator &(<#=typeName#> left, Int<#=i#> right) => default;

    /// <summary>
    /// Bitwise ands a <see cref="<#=typeName#>"/> value.
    /// </summary>
    /// <param name="left">The <see cref="<#=typeName#>"/> value to bitwise and.</param>
    /// <param name="right">The <see cref="UInt<#=i#>"/> value to combine.</param>
    /// <returns>The result of performing the bitwise and between <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator &(<#=typeName#> left, UInt<#=i#> right) => default;

    /// <summary>
    /// Bitwise ors a <see cref="<#=typeName#>"/> value.
    /// </summary>
    /// <param name="left">The <see cref="<#=typeName#>"/> value to bitwise or.</param>
    /// <param name="right">The <see cref="Int<#=i#>"/> value to combine.</param>
    /// <returns>The result of performing the bitwise or between <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator |(<#=typeName#> left, Int<#=i#> right) => default;

    /// <summary>
    /// Bitwise ors a <see cref="<#=typeName#>"/> value.
    /// </summary>
    /// <param name="left">The <see cref="<#=typeName#>"/> value to bitwise or.</param>
    /// <param name="right">The <see cref="UInt<#=i#>"/> value to combine.</param>
    /// <returns>The result of performing the bitwise or between <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator |(<#=typeName#> left, UInt<#=i#> right) => default;

    /// <summary>
    /// Bitwise xors a <see cref="<#=typeName#>"/> value.
    /// </summary>
    /// <param name="left">The <see cref="<#=typeName#>"/> value to bitwise xor.</param>
    /// <param name="right">The <see cref="Int<#=i#>"/> value to combine.</param>
    /// <returns>The result of performing the bitwise xor between <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator ^(<#=typeName#> left, Int<#=i#> right) => default;

    /// <summary>
    /// Bitwise xors a <see cref="<#=typeName#>"/> value.
    /// </summary>
    /// <param name="left">The <see cref="<#=typeName#>"/> value to bitwise xor.</param>
    /// <param name="right">The <see cref="UInt<#=i#>"/> value to combine.</param>
    /// <returns>The result of performing the bitwise xor between <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator ^(<#=typeName#> left, UInt<#=i#> right) => default;
<#
    }
    else if (elementTypeName == "Bool")
    {
        string argumentName = "xyzw".Substring(0, i);

        WriteLine("");
#>
    /// <summary>
    /// Ands two <see cref="<#=typeName#>"/> values.
    /// </summary>
    /// <param name="left">The <see cref="<#=typeName#>"/> value to and.</param>
    /// <param name="right">The <see cref="<#=typeName#>"/> value to combine.</param>
    /// <returns>The result of performing the bitwise and between <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator &(<#=typeName#> left, <#=typeName#> right) => default;

    /// <summary>
    /// Ors two <see cref="<#=typeName#>"/> values.
    /// </summary>
    /// <param name="left">The <see cref="<#=typeName#>"/> value to or.</param>
    /// <param name="right">The <see cref="<#=typeName#>"/> value to combine.</param>
    /// <returns>The result of performing the or between <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator |(<#=typeName#> left, <#=typeName#> right) => default;

    /// <summary>
    /// Xors two <see cref="<#=typeName#>"/> values.
    /// </summary>
    /// <param name="left">The <see cref="<#=typeName#>"/> value to xor.</param>
    /// <param name="right">The <see cref="<#=typeName#>"/> value to combine.</param>
    /// <returns>The result of performing the xor between <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator ^(<#=typeName#> left, <#=typeName#> right) => default;
<#
    }

    WriteLine("");
#>
    /// <summary>
    /// Compares two <see cref="<#=typeName#>"/> values to see if they are equal.
    /// </summary>
    /// <param name="left">The first <see cref="<#=typeName#>"/> value to compare.</param>
    /// <param name="right">The second <see cref="<#=typeName#>"/> value to compare.</param>
    /// <returns>The result of comparing <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static Bool<#=i#> operator ==(<#=typeName#> left, <#=typeName#> right) => default;

    /// <summary>
    /// Compares two <see cref="<#=typeName#>"/> values to see if they are not equal.
    /// </summary>
    /// <param name="left">The first <see cref="<#=typeName#>"/> value to compare.</param>
    /// <param name="right">The second <see cref="<#=typeName#>"/> value to compare.</param>
    /// <returns>The result of comparing <paramref name="left"/> and <paramref name="right"/>.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static Bool<#=i#> operator !=(<#=typeName#> left, <#=typeName#> right) => default;
<#
#>
}
<#
}
#>