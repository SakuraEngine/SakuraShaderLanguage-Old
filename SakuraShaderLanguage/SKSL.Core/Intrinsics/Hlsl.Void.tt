<#@include file="Hlsl.Void.ttinclude" #>
using SKSL.Core.Intrinsics.Attributes;
using SKSL.Exceptions;

#pragma warning disable IDE0022

namespace SKSL;

/// <inheritdoc cref="Hlsl"/>
partial class Hlsl
{
<#
PushIndent("    ");

bool isFirst = true;

foreach (var intrinsic in Intrinsics)
{
    foreach (var overload in intrinsic.Overloads)
    {
        if (isFirst) isFirst = false;
        else WriteLine("");

        WriteLine("/// <summary>");
        
        foreach (var line in intrinsic.Summary.Replace("\r", "").Split('\n'))
        {
            string trimmedLine = line.Trim();

            if (trimmedLine.Length > 0)
            {
                WriteLine($"/// {line.Trim()}");
            }
        }

        WriteLine("/// </summary>");

        foreach (var param in intrinsic.Parameters.Where(p => p.Name is not ""))
        {
            WriteLine($"/// <param name=\"{param.Name}\">{param.Info}</param>");
        }

        if (intrinsic.Remarks.Length > 0)
        {
            var lines = intrinsic.Remarks.Replace("\r", "").Split('\n');

            WriteLine("/// <remarks>");

            foreach (var line in lines)
            {
                string trimmedLine = line.Trim();

                if (trimmedLine.Length > 0)
                {
                    WriteLine($"/// {trimmedLine}");
                }
            }

            WriteLine($"/// <para>For more info, see <see href=\"{intrinsic.Url}\"/>.</para>");
            WriteLine("/// <para>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</para>");
            WriteLine("/// </remarks>");
        }
        else
        {
            WriteLine("/// <remarks>");
            WriteLine($"/// For more info, see <see href=\"{intrinsic.Url}\"/>.");
            WriteLine("/// <para>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</para>");
            WriteLine("/// </remarks>");
        }

        if (intrinsic.Name != intrinsic.HlslName)
        {
            WriteLine($"[HlslIntrinsicName(\"{intrinsic.HlslName}\")]");
        }

        Write($"public static void {intrinsic.Name}(");
        Write(string.Join(", ", intrinsic.Parameters.Where(p => p.Name is not "").Zip(overload, (a, b) => $"{(a.IsRef ? "ref " : a.IsOut ? "out " : "")}{b} {a.Name}")));
        Write(")");

        Write(" => throw new InvalidExecutionContextException(");

        var parameters = string.Join(", ", overload.Where(o => o.Length > 0).Select(t => $"{{typeof({t})}}"));

        WriteLine($"$\"{{typeof(Hlsl)}}.{{nameof({intrinsic.Name})}}({parameters})\");");    
    }
}

PopIndent();
#>
}
